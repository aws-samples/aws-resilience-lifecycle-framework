AWSTemplateFormatVersion: 2010-09-09

Description: AWS Synthetics API Canary

Parameters:
  ResHubStackName:
    Description: The name of the stack where you created the sample application resources
    Type: String
    Default: LAMP4   


Resources:
  Canary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: 'api-canary'
      ArtifactS3Location: !Sub s3://${ArtifactsBucket}
      Code:
        Handler: pageLoadBlueprint.handler
        Script: |
            import json
            import http.client
            from selenium.webdriver.common.by import By
            import urllib.parse
            import os
            from aws_synthetics.selenium import synthetics_webdriver as syn_webdriver
            from aws_synthetics.common import synthetics_logger as logger

            TARGET_URL = os.environ.get("TARGET_URL")

            def verify_request(method, url, post_data=None, headers={}):
                parsed_url = urllib.parse.urlparse(url)
                user_agent = str(syn_webdriver.get_canary_user_agent_string())
                if "User-Agent" in headers:
                    headers["User-Agent"] = f"{user_agent} {headers['User-Agent']}"
                else:
                    headers["User-Agent"] = user_agent

                logger.info(f"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}")

                if parsed_url.scheme == "https":
                    conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)
                else:
                    conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)

                conn.request(method, url, post_data, headers)
                response = conn.getresponse()
                logger.info(f"Status Code: {response.status}")
                logger.info(f"Response Headers: {json.dumps(response.headers.as_string())}")

                if not response.status or response.status < 200 or response.status > 299:
                    try:
                        logger.error(f"Response: {response.read().decode()}")
                    finally:
                        if response.reason:
                            conn.close()
                            raise Exception(f"Failed: {response.reason}")
                        else:
                            conn.close()
                            raise Exception(f"Failed with status code: {response.status}")

                logger.info(f"Response: {response.read().decode()}")
                logger.info("HTTP request successfully executed.")
                conn.close()

            def main():
                url1 = TARGET_URL
                method1 = 'GET'
                postData1 = ""
                headers1 = {}
                verify_request(method1, url1, None, headers1)
                logger.info("Canary successfully executed.")

            def handler(event, context):
                logger.info("Selenium Python API canary.")
                main()

      ExecutionRoleArn: !GetAtt CloudWatchSyntheticsRole.Arn
      RuntimeVersion: syn-python-selenium-2.0
      RunConfig:
        #ActiveTracing: True
        EnvironmentVariables:
          TARGET_URL: !ImportValue
             Fn::Sub: ${ResHubStackName}:ALB-TargetUrl
        TimeoutInSeconds: 60
      StartCanaryAfterCreation: True
      Schedule: {Expression: 'rate(1 minute)', DurationInSeconds: 3600}
      SuccessRetentionPeriod: 30  # days
      FailureRetentionPeriod: 30  # days

  CloudWatchSyntheticsRole:
    Type: AWS::IAM::Role
    Properties:
      Description: CloudWatch Synthetics lambda execution role for running canaries
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-ExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - logs:*
                  - cloudwatch:*
                Resource: '*'

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      