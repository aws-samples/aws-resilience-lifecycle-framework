AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template LAMP_Multi_AZ: Create a highly available,
  scalable LAMP stack with an Amazon RDS database instance for the backend data
  store. This template demonstrates using the AWS CloudFormation bootstrap
  scripts to install the packages and files necessary to deploy the Apache web
  server and PHP at instance launch time. **WARNING** This template creates one
  or more Amazon EC2 instances, an Application Load Balancer and an Amazon RDS
  DB instance. You will be billed for the AWS resources used if you create a
  stack from this template.
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  PublicSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of public SubnetIds in your Virtual Private Cloud (VPC) for the ALB
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
  PrivateSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of private SubnetIds in your Virtual Private Cloud (VPC) for Ec2 and RDS
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.      
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: myDatabase
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '20'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.small
    ConstraintDescription: must select a valid database instance type.
  MultiAZDatabase:
    Default: 'false'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.
  WebServerCapacity:
    Default: '2'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '5'
    ConstraintDescription: must be between 1 and 5 EC2 instances.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.small
    ConstraintDescription: must be a valid EC2 instance type.
  AmiID:
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: The ID of the AMI used to launch web server EC2 Instances.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref ALBSecurityGroup
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open EFS file share access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'

  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      #VPCZoneIdentifier: !Ref PrivateSubnets
      VPCZoneIdentifier: [ !Select [ 0, !Ref PublicSubnets ] ]
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2InstanceLaunchTemplate
        Version: !GetAtt Ec2InstanceLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: !Ref WebServerCapacity
      TargetGroupARNs:
        - !Ref ALBTargetGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: !Ref WebServerCapacity
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'

  
  Ec2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata: 
     AWS::CloudFormation::Init: 
       config:
          packages:
            yum:
              httpd: []
              php: []
              php-mysql: []
          files:
            /var/www/html/index.php:
              content: !Join 
                - ''
                - - |
                    <html>
                  - |2
                      <head>
                  - |2
                        <title>AWS CloudFormation PHP Sample</title>
                  - |2
                        <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
                  - |2
                      </head>
                  - |2
                      <body>
                  - |2
                        <h1>Welcome to the AWS CloudFormation PHP Sample</h1>
                  - |2
                        <p/>
                  - |2
                        <?php
                  - |2
                          // Print out the current data and tie
                  - |2
                          print "The Current Date and Time is: <br/>";
                  - |2
                          print date("g:i A l, F j Y.");
                  - |2
                        ?>
                  - |2
                        <p/>
                  - |2
                        <?php
                  - |2
                          // Setup a handle for CURL
                  - |2
                          $curl_handle=curl_init();
                  - |2
                          curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);
                  - |2
                          curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);
                  - '      // Get the IMDSv2 session token to request metadata'
                  - |2
                          curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, 'PUT');
                  - |2
                          curl_setopt($curl_handle, CURLOPT_HTTPHEADER, array('X-aws-ec2-metadata-token-ttl-seconds: 21600'));
                  - |2
                          curl_setopt($curl_handle, CURLOPT_URL, 'http://169.254.169.254/latest/api/token');
                  - |2
                          $token=curl_exec($curl_handle);
                  - |2
                          curl_setopt($curl_handle, CURLOPT_HTTPHEADER, array('X-aws-ec2-metadata-token: ' . $token));
                  - |2
                          // Get the hostname of the intance from the instance metadata
                  - |2
                          curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');
                  - |2
                          $hostname = curl_exec($curl_handle);
                  - |2
                          if (empty($hostname))
                  - |2
                          {
                  - |2
                            print "Sorry, for some reason, we got no hostname back <br />";
                  - |2
                          }
                  - |2
                          else
                  - |2
                          {
                  - |2
                            print "Server = " . $hostname . "<br />";
                  - |2
                          }
                  - |2
                          // Get the instance-id of the intance from the instance metadata
                  - |2
                          curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');
                  - |2
                          $instanceid = curl_exec($curl_handle);
                  - |2
                          if (empty($instanceid))
                  - |2
                          {
                  - |2
                            print "Sorry, for some reason, we got no instance id back <br />";
                  - |2
                          }
                  - |2
                          else
                  - |2
                          {
                  - |2
                            print "EC2 instance-id = " . $instanceid . "<br />";
                  - |2
                          }
                  # - '      $Database   = "'
                  # - !GetAtt 
                  #   - MySQLDatabase
                  #   - Endpoint.Address
                  # - |
                  #   ";
                  # - '      $DBUser     = "'
                  # - !Ref DBUser
                  # - |
                  #   ";
                  # - '      $DBPassword = "'
                  # - !Ref DBPassword
                  # - |
                  #   ";
                  # - |2
                  #         print "Database = " . $Database . "<br />";
                  # - |2
                  #         $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)
                  # - |2
                  #                         or die("Could not connect: " . mysql_error());
                  # - |2
                  #         print ("Connected to $Database successfully");
                  # - |2
                  #         mysql_close($dbconnection);
                  - |2
                        ?>
                  - |2
                        <h2>PHP Information</h2>
                  - |2
                        <p/>
                  - |2
                        <?php
                  - |2
                          phpinfo();
                  - |2
                        ?>
                  - |2
                      </body>
                  - |
                    </html>
              mode: '000600'
              owner: apache
              group: apache
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          commands:
            01-add-efs-entry:
              command:  !Sub | 
                echo "$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).${FileSystem}.efs.${AWS::Region}.amazonaws.com:/  /efs   nfs4    defaults" >> /etc/fstab
            02_enable_httpd:
              command: systemctl enable httpd
            03_start_httpd:
              command: systemctl start httpd
            04-mount-efs:
              command: sudo mount -a
            05-sync-log-files:
              command: echo "*/5 * * * * rsync -avz  /var/log/* /efs/logs" | crontab -  
    Properties:
     LaunchTemplateData:
        SecurityGroupIds:
         - !GetAtt WebServerSecurityGroup.GroupId
        InstanceInitiatedShutdownBehavior: terminate
        IamInstanceProfile: 
           Arn: 'arn:aws:iam::403191521364:instance-profile/aws-elasticbeanstalk-ec2-role'     
        KeyName: !Ref 'KeyName'
        ImageId: !Ref AmiID
        InstanceType: !Ref InstanceType
        UserData:
         Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            mkdir /efs  >/dev/null 2>&1 
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2InstanceLaunchTemplate --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the ELB and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ApplicationLoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VpcId
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open EFS file share access
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId:
          Ref: WebServerSecurityGroup
  
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      FileSystemTags:
      - Key: Name
        Value: 'myefsvolume'
  
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:  !Select [ 0, !Ref PublicSubnets ]
      SecurityGroups:
      - Ref: EFSSecurityGroup
  
  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId: !Select [ 1, !Ref PublicSubnets ]
      SecurityGroups:
      - Ref: EFSSecurityGroup        

  DBEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      VpcId: !Ref VpcId
  # MySQLDatabase:
  #   Type: 'AWS::RDS::DBInstance'
  #   Properties:
  #     Engine: MySQL
  #     BackupRetentionPeriod: 0
  #     DBName: !Ref DBName
  #     MultiAZ: !Ref MultiAZDatabase
  #     DBSubnetGroupName: !Ref myDBSubnetGroup
  #     MasterUsername: !Ref DBUser
  #     MasterUserPassword: !Ref DBPassword
  #     DBInstanceClass: !Ref DBInstanceClass
  #     AllocatedStorage: !Ref DBAllocatedStorage
  #     VPCSecurityGroups:
  #       - !GetAtt 
  #         - DBEC2SecurityGroup
  #         - GroupId
  # myDBSubnetGroup:
  #   Type: 'AWS::RDS::DBSubnetGroup'
  #   Properties:
  #     DBSubnetGroupDescription: RDS subnet group
  #     SubnetIds: !Ref PrivateSubnets

  ResHubRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'AWSResilienceHubRole'
      Description: 'IAM Role to be used by AWS Resielnce Hub Service'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - resiliencehub.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSResilienceHubAsssessmentExecutionPolicy'

Outputs:
  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName
